spring framework란?
java 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크이다.

애플리케이션 프레임워크
: 특정 계층이나 기술, 업무 분야에 국한되지 않고 애플리케이션의 전 영역을 포괄하는 범용적인 프레임워크를 말한다.

경량급 프레임워크
: 단순한 웹컨테이너에서도 엔터프라이즈 개발의 고급기술을 대부분 사용할 수 있다.
기존에는 웹스피어, 웹로직 (WAS)같은 비싼 고가 장비가 있어야지만 돌아가는것이 아니라
TOMCAT같은 웹 컨테이너만 있어도 돌릴 수 있다.

앤터프라이즈 개발 용이
: 개발자가 복잡하고 실수하기 쉬운 low level에 많이 신경쓰지 않으면서 business logic 개발에 전념할 수 있도록 해준다. (보안, 인증 등)

오픈소스
: spring은 opensource의 장점을 충분히 취하면서 동시에 opensource 제품의 단점과 한계를 잘 극복한다.
2009년 vmware사에서 spring 오픈소스를 다 사들임.


spring framework 전략
spring 삼각형
엔터프라이즈 개발의 복잡함을 상대하는 spring의 전략
-portable service abstraction
-DI
-AOP
-POJO

portable service abstraction (서비스 추상화)
: 트랜잭션 추상화, OXM(object xml mapping) 추상화, 데이터 액세스의 Exception변환기능 등 기술적인 복잡함은 추상화를 통해 low level의 기술 구현 부분과 기술을 사용하는 인터페이스로 분리한다.

객체지향과 DI(Dependency Injection) 의존관계 주입
: spring은 객체지향에 충실한 설계가 가능하도록 단순한 객체형태로 개발할 수 있고, DI는 유연하게 확장 가능한 객체를 만들어 두고 그 관계는 외부에서 다이내믹하게 설정해준다.

AOP(Aspect Oriented Programming) 관점지향 프로그래밍
AOP는 애플리케이션로직을 담당하는 코드에 남아 있는 기술 관련 코드를 분리해서 별도의 모듈로 관리하게 해주는 강력한 기술

POJO(plain old java object)
POJO는 객체지향 원리에 충실하면서, 특정 환경이나 규약에 종속되지 않고 필요에 따라 재활용 될 수 있는 방식으로 설계된 객체이다.


Spring Framework의 특징
-컨테이너 역할
: spring 컨테이너는 java 객체의 lifeCycle을 관리하며, spring컨테이너로 부터 필요한 객체를 가져와 사용할 수 있다.

-DI(Dependency Injection) 지원
: spring은 설정 파일이나 어노테이션을 통해 객체 간의 의존관계를 설정할 수 있도록 하고 있다.

-AOP(Aspect Oriented Progrmming) 지원
: spring은 트랜잭션이나 로깅, 보안과 같이 공통적으로 필요로 하는 모듈들을 실제 핵심 모듈에서 분리해서 적용할 수 있다.

-POJO(Plain Old Java Object) 지원
: spring은 컨테이너에 저장되는 java객체는 특정한한 인터페이스를 구현하거나, 특정 클래스를 상속받지 않아도 된다.

-트랜잭션 처리를 위한 일관된 방법을 지원
: JDBC, JTA 등 어떤 트랜잭션을 사용하던 설정을 통해 정보를 관리하므로 트랜잭션 구현에 상관없이 동일한 코드 사용가능

-영속성(Persistence)과 관련된 다양한 API 지원
: spring은 MyBatis, Hibernate 등 데이터베이스 처리를 위한 ORM(Object Relational Mapping) 프레임워크들과의 연동 지원


spring 프레임워크를 구성하는 기능 요소
- Core 컨테이너
- Context
- DAO
- ORM
- AOP
- Web
- WebMVC
