1. SW재사용 방안들
- copy & paste
변경 사항이 있을 때, 모든 곳에서 수정해주어야 한다.

- method(function)
method signature(메서드명, 리턴타입, 아규먼트 갯수,타입)이 다르면 안된다.

- class(inheritance)

- aop(aspect oriented programming)
관심의 분리(Seperatrion of Concerns)

2. 디자인 패턴과 프레임워크의 관련성

디자인패턴의 정의
디자인 패턴을 사용하는 이유
- 요구사항은 수시로 변경 -> 요구사항 변경에 대한 source code변경을 최소화 
- 여러 사람이 같이 하느 팀 프로젝트 진행 -> 범용적인 코딩스타일을 적용
- 상황에 따라 인수 인계하는 경우도 발생 -> 직관적인 코드를 사용

프레임워크의 정의
비기능적(non-functional) 요구사항(성능, 보안, 확장성, 안정성 등)을 만족하는 구조와 구현된 기능을 안정적으로 실행하도록 제어 해주는 잘 만들어진 구조의 라이브러리의 덩어리

-프레임워크는 애플리케이션의 최소한의 공통점을 찾아 하부 구조를 제공함으로써 개발자들로 하여금 시스템의 하부 구조를 구현하는데 들어가는 노력을 절감하게 해줌

프레임워크를 사용하는 이유
- 비기능적인 요소들을 초기 개발 단계마다 구현해야 하는 불합리함을 극복해준다.
- 기능적인(functional) 요구사항에 집중할 수 있도록 해준다.
- 디자인 패턴과 마찬가지로 반복적으로 발견되는 문제를 해결하기 위한 특화된 solution을 제공한다.

디자인패턴과 프레임워크의 관련성
디자인 패턴은 프레임워크의 핵심적인 특징이고, 프레임워크를 사용하는 어플리케이션에 그 패턴이 적용된다는 특징을 가지고 있다. 하지만 프레임워크는 디자인 패턴이 아니다.
-디자인 패턴은 애플리케이션을 설계할 때 필요한 구조적인 가이드라인은 되어 줄 수는 있지만 구체적으로 구현된 기반코드를 제공하지 않는다.
-프레임워크는 디자인 패턴과 함께 패턴이 적용 된 기반클래스 라이브러리를 제공해서 프레임워크를 사용하는 구조적인 틀과 구현코드를 함께 제공한다.


3.프레임워크의 구성요소와 종류
- IoC(Inversion of control)
Ioc란 '제어의 역전' 즉, 인스턴스 생성부터 소멸까지의 인스턴스 생명주기 관리를 개발자가 아닌 컨테이너가 대신 해준다는 뜻임.
즉, 컨테이너 역할을 해주는 프레임워크에게 제어하는 권한을 넘겨서 개발자의 코드가 신경 써야 할 것을 줄이는 전략이다.

프레임워크의 동작원리를 제어흐름이 일반적인 프로그램 흐름과 반대로 동작하므로 Ioc라고 설명함.
Spring 컨테이너는 IoC를 지원하며, 메타데이터(XML설정)를 통해 beans를 관리하고 어플리케이션의 중요부분을 형성함.
Spring 컨테이너는 관리되는 bean들을 의존성주입(Dependency Injection)을 통해 IoC를 지원함.

- Class Library
Ioc vs Library
Library : 개발자가 라이브러리를 호출하여 개발자가 라이브러리 코드의 주도권을 가짐
Ioc : 프레임워크가 개발자 코드를 호출하기 때문에 프레임워크가 주도권을 가짐

- Design pattern
디자인 패턴 + 라이브러리 = 프레임워크 

프레임워크 
웹(MVC) : Spring MVC
OR(object-relational)매핑 : MyBatis
AOP(Aspect Oriented Programming) : Spring AOP
DI(Dependency Injection) : Spring DI
Build와 Library관리 : Maven
단위 테스트 : jUnit
javascript : jQuery
